{"version":3,"sources":["Tabela.js","Header.js","Formulario.js","App.js","serviceWorker.js","index.js"],"names":["TableHead","TableBody","props","linhas","autores","map","linha","index","key","nome","livro","preco","className","onClick","removeAutor","Tabela","this","Component","Header","class","href","id","Formulario","inputListener","event","target","name","value","setState","formSubmit","submitListener","state","stateInicial","htmlFor","type","onChange","App","filter","autor","posicaoAtual","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3dda26fa.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst TableHead = () => {\n  return(\n    <thead>\n        <tr>\n          <th>Autores</th>\n          <th>Livros</th>\n          <th>Preços</th>\n          <th>Remover</th>\n        </tr>\n    </thead>\n  )\n}\nconst TableBody = props => {\n  const linhas = props.autores.map( (linha, index) => {\n    return(\n      <tr key={ index }>\n        <td>{ linha.nome }</td>\n        <td>{ linha.livro }</td>\n        <td>{ linha.preco }</td>\n         <td>\n            <button\n              className=\"waves-effect waves-light indigo lighten-2 btn\"\n              onClick = {() => {props.removeAutor(index) }}>\n                Remover\n            </button>\n        </td>\n      </tr>\n    )\n  });\n  return (\n    <tbody>\n      { linhas }\n    </tbody>\n  )\n}\n\nclass Tabela extends Component {\n\n\n\n  render() {\n    const { autores, removeAutor } = this.props;\n\n    return (\n      <table>\n        <TableHead />\n        <TableBody autores = { autores } removeAutor= { removeAutor }/>\n    </table>\n    );\n  }\n}\n\nexport default Tabela;","import React from 'react';\n\nconst Header = () => {\n  return (\n  <nav>\n    <div class=\"nav-wrapper indigo lighten-2\">\n      <a href=\"/\" class=\"brand-logo\">Autores</a>\n      <ul id=\"nav-mobile\" class=\"right\">\n        <li><a href=\"#autores\">Autores</a></li>\n        <li><a href=\"#livros\">Livros</a></li>\n        <li><a href=\"#sobre\">Sobre</a></li>\n      </ul>\n    </div>\n  </nav>\n  )\n}\n\nexport default Header;","import React, { Component } from 'react';\n\n\nclass Formulario extends Component {\n  constructor(props) {\n    super(props);\n\n    this.stateInicial = {\n      nome: '',\n      livro: '',\n      preco: '',\n    }\n\n    this.state = this.stateInicial;\n  }\n\n\n  inputListener = event => {\n    const { name, value } = event.target\n    this.setState({\n      [name]: value\n    })\n  }\n\n  formSubmit = () => {\n    this.props.submitListener(this.state)\n    this.setState(this.stateInicial);\n  }\n\n  render() {\n\n    const { nome, livro, preco } = this.state;\n\n    return (\n      <form>\n        <div className=\"row\">\n          <div className=\"input-field col s4\">\n            <label className=\"input-field\" htmlFor=\"nome\">Nome</label>\n            <input\n              id=\"nome\"\n              type=\"text\"\n              name=\"nome\"\n              value={nome}\n              onChange={this.inputListener}\n              className=\"validade\"\n            />\n          </div>\n          <div className=\"input-field col s4\">\n            <label className=\"input-field\" htmlFor=\"livro\">Livro</label>\n            <input\n              id=\"livro\"\n              type=\"text\"\n              name=\"livro\"\n              value={livro}\n              onChange={this.inputListener}\n              className=\"validade\"\n            />\n\n          </div>\n          <div className=\"input-field col s4\">\n            <label className=\"input-field\" htmlFor=\"preco\">Preço</label>\n            <input\n              id=\"preco\"\n              type=\"text\"\n              name=\"preco\"\n              value={preco}\n              onChange={this.inputListener}\n            />\n          </div>\n        </div>\n        <button onClick={this.formSubmit} type=\"button\"\n          className=\"waves-effect waves-light indigo lighten-2 btn\">Salvar\n          </button>\n      </form>\n\n    )\n\n  }\n}\n\nexport default Formulario;","import React, { Component, Fragment } from 'react';\nimport Tabela from './Tabela'\nimport Header from './Header'\nimport Form from './Formulario'\n\nimport 'materialize-css/dist/css/materialize.min.css';\nimport { render } from '@testing-library/react';\n\nimport './App.css';\n\n\n\nclass App extends Component {\n state = {\n    autores:  [\n      {\n        nome: 'Meng',\n        livro: 'React',\n        preco: '1000'\n      },\n      {\n        nome: 'Hai',\n        livro: 'Java',\n        preco: '99'\n      },\n      {\n        nome: 'Long',\n        livro: 'Design',\n        preco: '150'\n      },\n      {\n        nome: 'Lee',\n        livro: 'DevOps',\n        preco: '100'\n      },\n    ]\n  };\n\n  removeAutor = (index) => {\n    const { autores } = this.state;\n    this.setState(\n      {\n        autores: autores.filter((autor, posicaoAtual) => {\n         return posicaoAtual !== index;\n        }),\n      }\n    )\n  }\n\n  submitListener = autor => {\n    this.setState({ autores:[...this.state.autores, autor]})\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <Header />\n\n        <div className='container mb-10'>\n          <Tabela\n          className=\"centered highlight\"\n            autores     = { this.state.autores }\n            removeAutor = { this.removeAutor }\n          />\n\n          <Form submitListener={ this.submitListener }/>\n        </div>\n      </Fragment>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}